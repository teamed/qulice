 ------
 What is Quality for Qulice?
 ------
 Yegor Bugayenko
 ------
 2012-02-26
 ------

~~
~~ Copyright (c) 2011-2018, Qulice.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the Qulice.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~
~~ @version $Id$
~~

What is Quality and how to achieve it?

  Quality Java code, as we understand it, compiles and complies to
  {{{http://en.wikipedia.org/wiki/Static_program_analysis}static analysis}}
  rules. Qulice uses a number of open-source components (in order to avoid
  reinventing the wheel). We pre-configured these tools for your convenience
  and extended them with our specific rules.

* Checkstyle

  {{{http://checkstyle.sourceforge.net/checks.html}Inherited rules}}.

  Our custom rules:

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/BracketsStructureCheck.html}BracketsStructure}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/ConstantUsageCheck.html}ConstantUsage}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/EmptyLinesCheck.html}EmptyLines}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/ImportCohesionCheck.html}ImportCohesion}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/JavadocLocationCheck.html}JavadocLocation}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/JavadocTagsCheck.html}JavadocTags}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/MethodBodyCommentsCheck.html}MethodBodyComments}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/MultilineJavadocTagsCheck.html}MultilineJavadocTags}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/NonStaticMethodCheck.html}NonStaticMethod}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/StringLiteralsConcatenationCheck.html}StringLiteralsConcatenation}}

   * {{{./qulice-checkstyle/apidocs-${project.version}/com/qulice/checkstyle/JavadocEmptyLineCheck.html}JavadocEmptyLine}}

  If you want to disable some rule (this may happen, but try to avoid such
  situations at all cost):

+--
/**
 * @checkstyle ParameterNumber (3 lines)
 */
public void funcWithManyParams(int a, int b, int c, int d) {
  // @checkstyle MagicNumber (1 line)
  int num = 5;
  // ...
}
+--

* PMD

  {{{http://pmd.sourceforge.net/rules/index.html}Inherited rules}}.

  Rules can be disabled (again, try to avoid this at all cost):

+--
@SuppressWarnings("PMD.UseConcurrentHashMap")
public void func() {
  Map<String, String> map = new HashMap<String, String>();
  // ...
}
+--

* Cobertura

  Every class, method, and package should be covered by unit tests. Qulice will
  complain when coverage is not sufficient. To enable cobertura checks add
  <<<<goal>instrument</goal>>>> to plugin <<<executions>>> section:

+--
<build>
   <plugins>
       <plugin>
           <groupId>com.qulice</groupId>
           <artifactId>qulice-maven-plugin</artifactId>
           <version>${project.version}</version>
           <configuration>
               <license>file:${basedir}/LICENSE.txt</license>
           </configuration>
           <executions>
               <execution>
                   <goals>
                       <goal>instrument</goal>
                       <goal>check</goal>
                   </goals>
               </execution>
           </executions>
       </plugin>
   </plugins>
</build>
+--

  In order to get a visual presentation
  of your coverage add this to your <<<pom.xml>>>:

+--
<build>
  <pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.5.1</version>
      </plugin>
    </plugins>
  </pluginManagement>
</build>
+--

  And run <<<mvn cobertura:cobertura>>>. Then open
  <<<target/site/cobertura/index.html>>> in any browser.

  You can't disable Cobertura checks.
